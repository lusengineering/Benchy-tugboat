
#include <ESP8266WiFi.h>
#include <espnow.h>

// REPLACE WITH THE MAC Address of your receiver 
uint8_t broadcastAddress[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// Define variables to store readings to be sent
int links = 0;
int rechts = 0;
int forne = 0;

// Define variables to store incoming readings
int incomingl;
int incomingr;
int incomingf;

// Updates DHT readings every 10 seconds
const long interval = 10; 
unsigned long previousMillis = 0;    // will store last time DHT was updated
unsigned long previousMillisTimeout = 0; 

// Variable to store if sending data was successful
String success;

//Structure example to send data
//Must match the receiver structure
typedef struct struct_message {
    int l;
    int r;
    int f;
} struct_message;

// Create a struct_message called DHTReadings to hold sensor readings
struct_message DHTReadings;

// Create a struct_message to hold incoming sensor readings
struct_message incomingReadings;

// Callback when data is sent
void OnDataSent(uint8_t *mac_addr, uint8_t sendStatus) {
  Serial.print("Last Packet Send Status: ");
  if (sendStatus == 0){
    Serial.println("Delivery success");
  }
  else{
    Serial.println("Delivery fail");
  }
}


void getReadings(){
  // Read Temperature
  links = digitalRead(D5);
  rechts = digitalRead(D6);
  forne = digitalRead(D7);

  Serial.print("links: ");
  Serial.println(links);
  Serial.print("rechts: ");
  Serial.println(rechts);
  Serial.print("vorne: ");
  Serial.println(forne);
}

void printIncomingReadings(){
  // Display Readings in Serial Monitor
  Serial.println("INCOMING READINGS");
  Serial.print("nonsenswert 1: ");
  Serial.println(incomingl);
  Serial.print("Nonsenswert 2 und 3: ");
  Serial.println(incomingr);
  Serial.println(incomingf);
}
 
void setup() {
  pinMode(D5, INPUT); // Sets the linkspin as an Input
  pinMode(D6, INPUT); // Sets the rechtspin as an Input
  pinMode(D7, INPUT); // Sets the forwÃ¤rtspin as an Input
  
  // Init Serial Monitor
  Serial.begin(115200);
  Serial.println("Ich bin wach");
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();

  // Init ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Set ESP-NOW Role
  esp_now_set_self_role(ESP_NOW_ROLE_COMBO);

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  esp_now_add_peer(broadcastAddress, ESP_NOW_ROLE_COMBO, 1, NULL, 0);

}
 
void loop() {
  
  unsigned long currentMillis = millis();

  // Auf Input Checken 
  if (digitalRead(D7) == HIGH){
    previousMillisTimeout = currentMillis + 60000;
  }
    if (currentMillis - previousMillis >= interval) {
      // save the last time you updated the DHT values
      previousMillis = currentMillis;
  
      //Get DHT readings
      getReadings();
  
      //Set values to send
      DHTReadings.l = links;
      DHTReadings.r = rechts;
      DHTReadings.f = forne;
  
      // Send message via ESP-NOW
      esp_now_send(broadcastAddress, (uint8_t *) &DHTReadings, sizeof(DHTReadings));
  
      // Print incoming readings
      printIncomingReadings();
    }
    
   if (currentMillis >= previousMillisTimeout){
    Serial.println("Ich schlafe jetzt ein");
    ESP.deepSleep(10e6);
  }
}
