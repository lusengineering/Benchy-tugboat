
#include <ESP8266WiFi.h>
#include <espnow.h>
#include <Servo.h>

Servo MotorL;
Servo MotorR; 

// The Variable S sets the Engine Power from 0 to 180. 46 worked best for me
int s = 46;
int g = 0;

// REPLACE WITH THE MAC Address of your receiver 
uint8_t broadcastAddress[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// Define variables to store DHT readings to be sent
int pi;
int pa;
int po;

// Define variables to store incoming readings
int incomingl;
int incomingr;
int incomingf;

// Updates DHT readings every 10 seconds
const long interval = 10; 
unsigned long previousMillis = 0;    // will store last time DHT was updated 

// Variable to store if sending data was successful
String success;

//Structure example to send data
//Must match the receiver structure
typedef struct struct_message {
    int l;
    int r;
    int f;
} struct_message;

// Create a struct_message called DHTReadings to hold sensor readings
struct_message DHTReadings;

// Create a struct_message to hold incoming sensor readings
struct_message incomingReadings;

// Callback when data is sent
void OnDataSent(uint8_t *mac_addr, uint8_t sendStatus) {
  Serial.print("Last Packet Send Status: ");
  if (sendStatus == 0){
    Serial.println("Delivery success");
  }
  else{
    Serial.println("Delivery fail");
  }
}

// Callback when data is received
void OnDataRecv(uint8_t * mac, uint8_t *incomingData, uint8_t len) {
  memcpy(&incomingReadings, incomingData, sizeof(incomingReadings));
  Serial.print("Bytes received: ");
  Serial.println(len);
  incomingl = incomingReadings.l;
  incomingr = incomingReadings.r;
  incomingf = incomingReadings.f;
}

void getReadings(){
  // Read Temperature
  pi = 4;
  pa = 4;
  po = 4;
}

void printIncomingReadings(){
  // Display Readings in Serial Monitor
  Serial.println("INCOMING READINGS");
  Serial.print("links: ");
  Serial.println(incomingl);
  Serial.print("rechts: ");
  Serial.println(incomingr);
  Serial.print("vorne: ");
  Serial.println(incomingf);
}
 
void setup() {
  // Init Serial Monitor
  Serial.begin(115200);

  MotorL.attach(5);   // GPIO 5 ist D1
  MotorR.attach(4);   // GPIO 4 ist D2

  MotorL.write(0);
  MotorR.write(0);
  
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();

  // Init ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Set ESP-NOW Role
  esp_now_set_self_role(ESP_NOW_ROLE_COMBO);

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  esp_now_add_peer(broadcastAddress, ESP_NOW_ROLE_COMBO, 1, NULL, 0);
  
  // Register for a callback function that will be called when data is received
  esp_now_register_recv_cb(OnDataRecv);
}
 
void loop() {
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    // save the last time you updated the DHT values
    previousMillis = currentMillis;

    //Get DHT readings
    getReadings();

    //Set values to send
    DHTReadings.l = pi;
    DHTReadings.r = pa;
    DHTReadings.f = po;

    // Send message via ESP-NOW
    esp_now_send(broadcastAddress, (uint8_t *) &DHTReadings, sizeof(DHTReadings));
    
    // Pr체fen ob gerade dauergas gegeben werden soll
    if (g == 1){
      MotorL.write(s);
      MotorR.write(s);
    }

    // steuerbefehl vorw채rts pr체fen 
    if (incomingf == 1){
      if (incomingr == 1 || incomingl == 1){
        if (incomingl == 1 && incomingr == 1){
          MotorL.write(s);
          MotorR.write(s);
          g = 1;
          Serial.println("Dauergas");
          delay(100);
        }
        else {
            if (incomingl == 1){
            MotorL.write(s);
            MotorR.write(s/2);
            g = 0;
            Serial.println("Gas und Links");
          }
            if (incomingr == 1){
              MotorL.write(s/2);
              MotorR.write(s);
              g = 0;
              Serial.println("Gas und Rechts");
          }
        }
      }
      else {
        MotorL.write(s);
        MotorR.write(s);
        g = 0;
        Serial.println("Vorw채rtsgas");
      }
    }
    else{
        if (incomingl == 1){
        MotorL.write(s);
        g = 0;
        Serial.println("Nur links");
      }
      else if (incomingr == 1){
        MotorR.write(s);
        g = 0;
        Serial.println("Nur Rechts");
      }
      else{
        if (g == 0){
        MotorR.write(0);
        MotorL.write(0);
        }
      }
    }

    // Print incoming readings
    printIncomingReadings();
  }
}
